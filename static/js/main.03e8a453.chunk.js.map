{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","helpers/GetUserById.tsx","components/TodoForm/TodoForm.tsx","App.tsx","api/todos.ts","helpers/GetNewTodoId.tsx","index.tsx"],"names":["UserInfo","user","name","email","className","href","TodoInfo","todo","id","title","completed","cn","TodoList","todos","map","username","getUserById","userId","users","find","TodoForm","todoAdd","newTodoId","useState","setTitle","titleError","setTitleError","setUserId","userIdError","setUserIdError","titleRegex","action","method","onSubmit","event","preventDefault","trim","type","value","onChange","target","test","placeholder","disabled","initialTodos","App","array","usersFromServer","setTodos","newTodo","currentTodos","Math","max","item","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.03e8a453.chunk.js","sourcesContent":["import { User } from '../../types/User';\n\ntype Props = {\n  user: User,\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const { name, email } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import cn from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: Todo\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    id,\n    title,\n    completed,\n    user,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={cn('TodoInfo', {\n        'TodoInfo--completed': completed,\n      })}\n    >\n      <h2 className=\"TodoInfo__title\">{title}</h2>\n\n      {user && <UserInfo user={user} />}\n    </article>\n  );\n};\n","import { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: Todo[]\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo\n          key={todo.id}\n          todo={todo}\n        />\n      ))}\n    </section>\n  );\n};\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import users from '../api/users';\nimport { User } from '../types/User';\n\nexport const getUserById = (userId: number): User | null => {\n  const result = users.find(user => user.id === userId);\n\n  return result || null;\n};\n","import { useState } from 'react';\n\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { getUserById } from '../../helpers/GetUserById';\n\ntype Props = {\n  users: User[],\n  todoAdd: (newTodo: Todo) => void,\n  newTodoId: number,\n};\n\nexport const TodoForm: React.FC<Props> = ({ users, todoAdd, newTodoId }) => {\n  const [title, setTitle] = useState('');\n  const [titleError, setTitleError] = useState(false);\n\n  const [userId, setUserId] = useState(0);\n  const [userIdError, setUserIdError] = useState(false);\n\n  const titleRegex = /^[a-zA-Zа-яА-Я0-9\\s]*$/;\n\n  const resetForm = () => {\n    setTitle('');\n    setUserId(0);\n  };\n\n  const handleTitleChange = (\n    { target: { value } }: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    if (titleRegex.test(value)) {\n      setTitle(value);\n    }\n\n    setTitleError(false);\n  };\n\n  const handleUserChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setUserId(+(event.target.value));\n    setUserIdError(false);\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!title.trim()) {\n      setTitleError(true);\n    }\n\n    if (userId <= 0) {\n      setUserIdError(true);\n    }\n\n    if (!title.trim() || userId <= 0) {\n      return;\n    }\n\n    todoAdd({\n      id: newTodoId,\n      title,\n      completed: false,\n      userId,\n      user: getUserById(userId),\n    });\n\n    resetForm();\n  };\n\n  return (\n    <form action=\"/api/todos\" method=\"POST\" onSubmit={handleSubmit}>\n      <div className=\"field\">\n        <label>\n          {'Title: '}\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            value={title}\n            onChange={handleTitleChange}\n            placeholder=\"Enter a title\"\n          />\n        </label>\n        {titleError && (\n          <span className=\"error\">Please enter a title</span>\n        )}\n      </div>\n\n      <div className=\"field\">\n        <label>\n          {'User: '}\n          <select\n            data-cy=\"userSelect\"\n            value={userId}\n            onChange={handleUserChange}\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n            {users.map(user => (\n              <option key={user.id} value={user.id}>{user.name}</option>\n            ))}\n          </select>\n        </label>\n\n        {userIdError && (\n          <span className=\"error\">Please choose a user</span>\n        )}\n      </div>\n\n      <button type=\"submit\" data-cy=\"submitButton\">\n        Add\n      </button>\n    </form>\n  );\n};\n","import { useState } from 'react';\n\nimport './App.scss';\nimport { TodoList } from './components/TodoList';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { TodoForm } from './components/TodoForm/TodoForm';\nimport { Todo } from './types/Todo';\nimport { getNewTodoId } from './helpers/GetNewTodoId';\nimport { getUserById } from './helpers/GetUserById';\n\nexport const initialTodos: Todo[] = todosFromServer.map((todo) => ({\n  ...todo,\n  user: getUserById(todo.userId),\n}));\n\nexport const App = () => {\n  const [users] = useState(usersFromServer);\n  const [todos, setTodos] = useState(initialTodos);\n\n  const todoAdd = (newTodo: Todo) => setTodos(\n    currentTodos => [...currentTodos, newTodo],\n  );\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <TodoForm\n        users={users}\n        todoAdd={todoAdd}\n        newTodoId={getNewTodoId(todos)}\n      />\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import { Todo } from '../types/Todo';\n\nexport const getNewTodoId = (array: Todo[]) => {\n  const maxId = Math.max(...array.map(item => item.id));\n\n  return maxId + 1;\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}